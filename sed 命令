sed -i 's/\r$//'  sna.sh


<<sed>>

sed [options] 'AddressCommand' file....     

可以使用单引号或双引号， 强引用或弱引用
对指定位置（Address）的行执行命令（Command）
处理完成后将模式空间中的内容显示出来
模式空间（存将要进行模式匹配的所有行），保留空间

sed默认不编辑源文件，仅对模式空间中的数据做处理，处理结束后，将模式空间打印至屏幕

sed默认逐行读取


1.如何指定地址，方式：
1）起始地址和结束地址
StartLine,EndLine
例：  1,100
      1,$    全文
	  注：全文可以不写起始地址和结束地址

2)使用正则表达式指定模式
/RegExp/
例：  /^root/        指定以root开头的行

3)第一种方式的起始地址和结束地址也可使用正则表达式
/pattern1/,/pattern2/
例：  /pattern1/,/pattern2/    表示第一次被模式1匹配的行开始到第一次被模式2匹配的行结束的中间的所有行

4)指定某行
LineNumber     精确指定到某行
例如：  $   最后一行
        $-1 倒数第二行
		
5）指定起始行至其后的N行
StartLine, +N


2.命令：Command
1）d: 删除符合条件的行
例： sed '1,2d' /etc/fstab     删除前两行
     sed '1,$-1d' /etc/fstab   删除第一行到倒数第二行 
	 sed '/oor/d'              删除包含oot的行
	 sed '1,+2d' /etc/fstab    删除第一行开始的三行
	 sed '1d' /etc/fstab       删除第一行
	 sed '/^\//d' /etc/fstab   删除以/开头的行
	 sed 'd' /etc/fstab        删除全文

2）p：显示符合条件的行。逐行读取，sed命令本身将所有行显示一次， print命令将符合条件的行再显示一次，可以使用静默模式避免打印两次


3）a \string：在符合条件的行后面追加新行，内容为 string
例： sed '/^\//a \# hello world\n'   在以/开头的行后面追加新行，内容为"# hello world\n"    \n为换行符，可用于换行


4）i \string：在符合条件的行前面添加新行，内容为string


5）r FILE：将指定的文件内容添加至符合条件的行处，可用于合并文件
例： sed '2r /etc/issue' /etc/fstab    将文件/etc/issue文件的内容添加至文件/etc/fstab第二行后面
     sed '$r /etc/issue' /etc/fstab    在最后一行后面添加
	 sed '1,2r /etc/issue' /etc/fstab  1和2行后
	
	
6）w FILE：将(地址指定的)指定范围内的内容另存至指定的文件中
例： sed -n '/oot/w /tmp/oot.txt' /etc/fstab

7）s/pattern/string/修饰符：查找并替换   三个///, pattern：匹配模式，要查找的内容，string：将模式匹配到的字符串替换为string
在每一行中，将能够被pattern匹配的字符串替换为string字符串

注：
    1）s/pattern/string/修饰符：命令中分隔符可以替换成任意字符，只要三个分隔符相同即可
	2）pattern可使用正则表达式；string不可，可使用引用、后向引用
	     s/pattern/&string/  匹配到的字符串为str1，将行中匹配到的字符串替换为 str1 + string, string位置可以任意
		    &：表示引用模式匹配的整个串
		 s/\(pattern\)/\1string/ ：后向引用，有些时候只能使用后向引用（只引用前面匹配到的内容中的一部分）
    3）默认替换每一行中第一次被匹配到的字符串，可加修饰符修正命令的执行
修饰符可选

修改符：
   g：全局替换
         s/pattern/string/g
   i：查找时忽略字符的大小写
         s/pattern/string/i
		 

例： sed -n 's/oot/OOT/' /etc/fstab   将全文中每行第一次匹配到的字符串oot替换成OOT
     sed -n 's/^\//#/' /etc/fstab     将行首的/替换成#
	 sed -n 's/\//#/g' /etc/fstab     将所有的/替换成#
	 sed -n 's@^/@#@g' /etc/fstab     将所有的/替换成#
	 sed -n 's/l..e/&r/g'             引用，如匹配到like，则将行中的like替换为liker
	 sed -n 's/\(l..e\)/\1r/'         后向引用
	 sed -n 's/l\(..e\)/L\1/'         如匹配到like，则将行中的like替换成Like

	

3.选项： options
1）-n：静默模式
    不再默认显示模式空间中的内容，只跟命令相关
	
2）-i：直接修改源文件

3）-e SCRIPT：可出现多次，可以同时执行多个脚本

4）-f /PATH/TO/SED/SCRIPT：文件中每一行是一个script
例： sed -f /path/to/scripts file：scripts文件中保存的都是一个个脚本，将脚本一个个地用于文件file上

5）-r：表示使用扩展的正则表达式。sed默认情况下只支持基本的正则表达式

   基本                   扩展
    无                     ？
    \(\)                   ()
	


例： sed -n 's/^[[:space:]]//'   删除行首的空白字符






<<linux种测试>>
[ expression ]
[[ expression ]]
test expression



1.字符串测试

双目运算符
1）==或=：比较两个字符串是否一致
    注： 用=比较时，因为两边是变量的引用而不是变量，因此可以区分是比较还是赋值
例：	
	[ $var1 == $var2 ]
	[ "$var1" == "$var2" ]
	[[ $var1 == $var2 ]]
	[[ "$var1" == "$var2" ]]
	
2）!=：不等

3）>

4）<


单目运算符
1）-n string：字符串不为空，长度不为0

2）-z string：字符串为空，长度为0

2）-s string：测试指定的字符串是否不空，不空为真，空则为假


2.整数测试(双目运算符)
    -eq
	-ne
	-lt
	-gt
	-ge
	-le

3.文件测试（单目运算符）
    -e   文件是否存在
	-f   是否是普通文件
	-d   是否是目录
	-w   当前用户是否有写权限
	-r
	-x




<<linux算术运算>>
1.let express;

2.$[express]

3.$((express))

4.`expr express`



     
<<循环控制>>    

1.for
for var in {1..100}; do
  statement
done

1)列表：
{1..100}
1, 2, 3, 4
seq n       seq 10 = {1..10}
seq 起始 结束
seq 起始 步径长度 结束    （起始和步径长度可省）

可用命令替换生成列表
·seq 10·
`ls /etc`

2）声明变量
declare -i  sum=0；  将变量声明为整型
declare -x           声明为环境变量




<<vim>>
全屏编辑器
模式化的编辑

1.vim模式
1）编辑模式（命令模式）
用vim打开文件时默认处于编辑模式

2）输入模式

3）末行模式


2.模式转换
1）编辑-->输入
   i：在当前光标所在字符的前面，转为输入模式
   a：在当前光标所在字符的后面，转为输入模式
   o：在当前光标所在行的下方新建一行，并转为输入模式
   
   I：在当前光标所在行的行首转为输入模式
   A：在当前光标所在行的行尾转为输入模式
   O：在当前光标所在行的上方新建一行，并转为输入模式
   
2）输入-->编辑
    Esc
	
3）编辑-->末行     只能从编辑模式进入末行模式
    :
	
例：
    :10d        删除第十行
	:10,20d     删除第十到第二十行
	:set nu     显示行号
	:Shell 命令    如：  :ls /etc
	

4）末行-->编辑
   Esc  Esc
   



2.打开文件
vim +n            打开文件时，使光标处于第n行上
vim +inittab      定位至最后一行
vim +             定位至最后一行
vim + /PATTERN    定位至第一次被模式匹配的行的行首


3.关闭文件
1）在末行模式下关闭文件
  :q
  :wq   可简写为   :x
  
  
2）编辑模式下关闭文件
  ZZ   保存退出
  
  
4.移动光标（编辑模式下）
1）逐字符移动
   h：左
   l：右
   j：下
   k：上
   
   都可以加数字，移动指定数目的字符
   nh
   
2）逐个单词移动
   w：移至下一个单词的词首
   e：跳到当前单词词尾或下一单词的词尾
   b：跳到当前单词词首或前一单词的词首

   nw
   
3）行内跳转
   0
   ^: 跳到行首，行首的第一个非空白字符
   $：绝对行尾
   
   (/)：在句子间跳转
   {/}：在段落间跳转

   
4）行间跳转
  nG：跳转至第n行
  G：跳转至最后一行
  g：跳转至第一行
 
  :n  末行模式下，直接给出行行号即可
  
  
4.翻屏操作
  ctrl+f：向下翻一屏
  ctrl+b：向下翻一屏
  
  ctrl+d：向下翻半屏
  ctrl+u：向上翻半屏
  
  
6.编辑命令
1）nx：删除光标所在所及其向后的共n个字符
  
2）d：删除命令
  d命令可和跳转命令组合使用，可以指定删除多少
  nd：指定删除n行
  nd跳转符：删除跳转符所指定范围的n个
    例：dw de
  dd：删除当前光标的所在行
     ndd：删除包括当前光标所在行的共n行

末行模式下：
   :m,nd：删除第m行到第n行
   :.,nd：删除当前行及其向下n行，共删除n+1行
          .：表示当前行
	      $：最后一行
	      $-n：倒数第二行
	      +n：向下的n行
		      例：1,$-1d
			  
最近一次删除的内容可用于粘贴：类似剪切


3）p：复制
  p：如果删除或复制为整行内容，则粘贴至光标所在行下方；如果复制或删除的内容为非整行，则粘贴至光标所在字符的后面
  P：如果删除或复制为整行内容，则粘贴至光标所在行上方；如果复制或删除的内容为非整行，则粘贴至光标所在字符的前面
  
4）y：复制
用法同d

  nyy：复制n行
  
末行模式下：
  :m,ny：复制第m到第n行
  :ny跳转命令
例：:y0，复制当前光标至行尾
    :y$
	:y^
  
	    
  
  







































